{"version":3,"sources":["GraphViz.js","App.js","serviceWorker.js","index.js"],"names":["config","nodeHighlightBehavior","node","color","size","highlightStrokeColor","link","highlightColor","automaticRearrangeAfterDropNode","regenerate","maxWidth","count","blackCount","data","graph","generateRandomGraph","generateRandomTree","Array","fill","map","_","i","toString","edgeProbability","serialize","convertedCount","nodes","length","Math","random","useState","setCount","setMaxWidth","setBlackCount","setNodes","style","position","top","right","fontSize","padding","fontWeight","type","min","value","inputMode","onChange","e","Number","target","width","onClick","console","log","JSON","stringify","id","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a2384bf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Graph } from \"react-d3-graph\";\r\nimport { generateRandomTree, generateRandomGraph } from \"random-graph-generator\";\r\n\r\nconst config = {\r\n  nodeHighlightBehavior: true,\r\n  node: {\r\n    color: \"lightgreen\",\r\n    size: 120,\r\n    highlightStrokeColor: \"red\",\r\n  },\r\n  link: {\r\n    highlightColor: \"red\",\r\n  },\r\n  automaticRearrangeAfterDropNode: true,\r\n};\r\n\r\nconst regenerate = ({ maxWidth, count, blackCount, graph }) => {\r\n  const fn = graph ? generateRandomGraph : generateRandomTree;\r\n  const data = fn(\r\n    new Array(count).fill(null).map((_, i) => i.toString()),\r\n    {\r\n      maxWidth,\r\n      edgeProbability: 0.3,\r\n    }\r\n  ).serialize();\r\n\r\n  let convertedCount = 0;\r\n\r\n  while (convertedCount < blackCount) {\r\n    for (let i = 0; i < data.nodes.length; i++) {\r\n      if (Math.random() < (1 / data.nodes.length * blackCount)) {\r\n        data.nodes[i].color = 'black';\r\n        convertedCount++;\r\n      }\r\n      if (convertedCount >= blackCount) break;\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n\r\n\r\nexport default () => {\r\n  const [count, setCount] = useState(50);\r\n  const [maxWidth, setMaxWidth] = useState(5);\r\n  const [blackCount, setBlackCount] = useState(5);\r\n  const [nodes, setNodes] = useState(regenerate({ count, maxWidth }));\r\n\r\n  const exportGraphson = () => {\r\n    console.log(\r\n      JSON.stringify(\r\n        nodes,\r\n        null,\r\n        2\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{ position: 'fixed', top: '10px', right: '10px', fontSize: '14px', padding: '0.75rem', fontWeight: 'bold' }}>\r\n        <label>Node Count:</label>\r\n        <input type=\"number\" min=\"1\" value={count} \r\n          inputMode=\"numeric\" onChange={e => setCount(Number(e.target.value))}\r\n          style={{ fontSize: '14px', padding: '0.5rem', width: '50px' }} />\r\n      </div>\r\n      <div\r\n        style={{ position: 'fixed', top: '50px', right: '10px', fontSize: '14px', padding: '0.75rem', fontWeight: 'bold' }}>\r\n        <label>Max Width:</label>\r\n        <input type=\"number\" min=\"1\" value={maxWidth} \r\n          inputMode=\"numeric\" onChange={e => setMaxWidth(Number(e.target.value))}\r\n          style={{ fontSize: '14px', padding: '0.5rem', width: '50px' }} />\r\n      </div>\r\n      <div\r\n        style={{ position: 'fixed', top: '90px', right: '10px', fontSize: '14px', padding: '0.75rem', fontWeight: 'bold' }}>\r\n        <label>Black Nodes:</label>\r\n        <input type=\"number\" min=\"1\" value={blackCount} \r\n          inputMode=\"numeric\" onChange={e => setBlackCount(Number(e.target.value))}\r\n          style={{ fontSize: '14px', padding: '0.5rem', width: '50px' }} />\r\n      </div>\r\n      <button \r\n        type=\"button\" \r\n        style={{ position: 'fixed', top: '160px', right: '10px', fontSize: '14px', padding: '0.75rem' }}\r\n        onClick={() => setNodes(regenerate({ count, maxWidth, graph: false, blackCount }))}>\r\n        Generate Tree\r\n      </button>\r\n      <button \r\n        type=\"button\" \r\n        style={{ position: 'fixed', top: '230px', right: '10px', fontSize: '14px', padding: '0.75rem' }}\r\n        onClick={() => setNodes(regenerate({ count, maxWidth, graph: true, blackCount }))}>\r\n        Generate Graph\r\n      </button>\r\n      <button \r\n        type=\"button\" \r\n        style={{ position: 'fixed', top: '300px', right: '10px', fontSize: '14px', padding: '0.75rem' }}\r\n        onClick={exportGraphson}>\r\n        Export to Console\r\n      </button>\r\n      <Graph\r\n        id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n        data={nodes}\r\n        config={config}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Graph from \"./GraphViz\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <Graph />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}